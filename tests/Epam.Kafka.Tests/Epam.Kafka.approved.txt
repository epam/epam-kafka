namespace Epam.Kafka
{
    public interface IKafkaFactory
    {
        Confluent.Kafka.IConsumer<TKey, TValue> CreateConsumer<TKey, TValue>(Confluent.Kafka.ConsumerConfig config, string? cluster = null, System.Action<Confluent.Kafka.ConsumerBuilder<TKey, TValue>>? configure = null);
        Confluent.Kafka.ConsumerConfig CreateConsumerConfig(string? configName = null);
        Confluent.Kafka.IProducer<TKey, TValue> CreateProducer<TKey, TValue>(Confluent.Kafka.ProducerConfig config, string? cluster = null, System.Action<Confluent.Kafka.ProducerBuilder<TKey, TValue>>? configure = null);
        Confluent.Kafka.ProducerConfig CreateProducerConfig(string? configName = null);
        Confluent.Kafka.IClient GetOrCreateClient(string? cluster = null);
        Confluent.SchemaRegistry.ISchemaRegistryClient GetOrCreateSchemaRegistryClient(string? cluster = null);
    }
    public class KafkaBuilder
    {
        public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
        public Microsoft.Extensions.Options.OptionsBuilder<Epam.Kafka.Options.KafkaClusterOptions> WithClusterConfig(string name) { }
        public Epam.Kafka.KafkaBuilder WithConfigPlaceholders(string key, string value) { }
        public Microsoft.Extensions.Options.OptionsBuilder<Epam.Kafka.Options.KafkaConsumerOptions> WithConsumerConfig(string name) { }
        public Epam.Kafka.KafkaBuilder WithDefaults(System.Action<Epam.Kafka.Options.KafkaFactoryOptions> configure) { }
        public Microsoft.Extensions.Options.OptionsBuilder<Epam.Kafka.Options.KafkaProducerOptions> WithProducerConfig(string name) { }
        public Microsoft.Extensions.Options.OptionsBuilder<Epam.Kafka.Options.KafkaClusterOptions> WithTestMockCluster(string name, int numBrokers = 1) { }
    }
    public static class KafkaClientExtensions
    {
        public static Confluent.Kafka.IAdminClient CreateDependentAdminClient(this Confluent.Kafka.IClient client) { }
        public static Confluent.Kafka.IProducer<TKey, TValue> CreateDependentProducer<TKey, TValue>(this Confluent.Kafka.IClient client, System.Action<Confluent.Kafka.DependentProducerBuilder<TKey, TValue>>? configure = null) { }
    }
    public static class KafkaConfigExtensions
    {
        public const string DotnetLoggerCategoryKey = "dotnet.logger.category";
        public static TConfig Clone<TConfig>(this TConfig config, System.Collections.Generic.IReadOnlyDictionary<string, string>? placeholders = null)
            where TConfig : Confluent.Kafka.Config, new () { }
        public static int GetCancellationDelayMaxMs(this Confluent.Kafka.ConsumerConfig config) { }
        public static string GetDotnetLoggerCategory(this Confluent.Kafka.Config config) { }
        public static void SetCancellationDelayMaxMs(this Confluent.Kafka.ConsumerConfig config, int value) { }
        public static void SetDotnetLoggerCategory(this Confluent.Kafka.Config config, string value) { }
    }
    public static class LogExtensions
    {
        public static void KafkaLogHandler(this Microsoft.Extensions.Logging.ILogger logger, Confluent.Kafka.LogMessage msg) { }
        public static Microsoft.Extensions.Logging.LogLevel ToNetLogLevel(this Confluent.Kafka.SyslogLevel level) { }
    }
    public class OAuthRefreshResult
    {
        public OAuthRefreshResult(string tokenValue, System.DateTimeOffset expiresAt, string principalName, System.Collections.Generic.IDictionary<string, string>? extensions = null) { }
        public System.DateTimeOffset ExpiresAt { get; }
        public System.Collections.Generic.IDictionary<string, string>? Extensions { get; }
        public string PrincipalName { get; }
        public string TokenValue { get; }
    }
    public class ProducerPartitioner
    {
        public ProducerPartitioner() { }
        public Confluent.Kafka.PartitionerDelegate? Default { get; set; }
        public System.Collections.Generic.IDictionary<string, Confluent.Kafka.PartitionerDelegate> TopicSpecific { get; }
        public void Apply<TKey, TValue>(Confluent.Kafka.ProducerBuilder<TKey, TValue> producerBuilder) { }
    }
    public static class ServiceCollectionExtensions
    {
        public static Epam.Kafka.KafkaBuilder AddKafka(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, bool useConfiguration = true) { }
    }
    public sealed class TestMockCluster : System.IDisposable
    {
        public TestMockCluster(int numBrokers = 1, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory = null) { }
        public string BootstrapServers { get; }
        public Confluent.Kafka.IAdminClient CreateDependentAdminClient() { }
        public void Dispose() { }
        public System.Collections.Generic.Dictionary<Confluent.Kafka.Message<byte[], byte[]?>, Confluent.Kafka.DeliveryResult<byte[], byte[]?>> SeedTopic(string topicName, params Confluent.Kafka.Message<byte[], byte[]?>[] messages) { }
    }
}
namespace Epam.Kafka.Options
{
    public sealed class KafkaClusterOptions : Microsoft.Extensions.Options.IOptions<Epam.Kafka.Options.KafkaClusterOptions>
    {
        public KafkaClusterOptions() { }
        public Confluent.Kafka.ClientConfig ClientConfig { get; set; }
        public Confluent.SchemaRegistry.SchemaRegistryConfig SchemaRegistryConfig { get; set; }
        public Epam.Kafka.Options.KafkaClusterOptions WithOAuthHandler(System.Func<string?, Epam.Kafka.OAuthRefreshResult> createToken, bool throwIfAlreadySet = false) { }
        public Epam.Kafka.Options.KafkaClusterOptions WithSchemaRegistryAuthenticationHeader(Confluent.SchemaRegistry.IAuthenticationHeaderValueProvider provider) { }
    }
    public sealed class KafkaConsumerOptions : Microsoft.Extensions.Options.IOptions<Epam.Kafka.Options.KafkaConsumerOptions>
    {
        public KafkaConsumerOptions() { }
        public Confluent.Kafka.ConsumerConfig ConsumerConfig { get; set; }
    }
    public sealed class KafkaFactoryOptions : Microsoft.Extensions.Options.IOptions<Epam.Kafka.Options.KafkaFactoryOptions>
    {
        public KafkaFactoryOptions() { }
        public string? Cluster { get; set; }
        public string? Consumer { get; set; }
        public string? Producer { get; set; }
    }
    public sealed class KafkaProducerOptions : Microsoft.Extensions.Options.IOptions<Epam.Kafka.Options.KafkaProducerOptions>
    {
        public KafkaProducerOptions() { }
        public Confluent.Kafka.ProducerConfig ProducerConfig { get; set; }
    }
}
